name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ $default-branch, 'release/*', 'master' ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ $default-branch ]

env:
  # # Use docker.io for Docker Hub if empty
  # REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    environment: deployment # this gets the secrets for deployments

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # for multi architecture builds arm/x86
      - name: Setup qumu runner
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1



      - name: Capture build vars
        id: vars
        shell: bash
        run: |
          git_ref=$(echo ${GITHUB_REF#refs/heads/}| tr "/" "-" )
          hash=${GITHUB_SHA::6}

          if [ "$GITHUB_REF_TYPE" == "tag" ]; then
            echo "processing tag"
            docker_tag="$git_ref"
          fi

          if [ "$GITHUB_REF_TYPE" == "branch" ]; then
            echo "processing branch"

            if [ "$git_ref" == "master" ]; then
              echo "match latest"
              docker_tag=latest
            fi
            
            docker_tag="${git_ref}"
          fi

          echo "branch: $git_ref"
          echo "hash: $hash"
          echo "dockertag: $docker_tag"

          echo "::set-output name=git_ref::$git_ref"
          echo "::set-output name=sha_short::$hash"
          echo "::set-output name=docker_tag::$docker_tag"
          
      # # ################################
      # # push docker images (dockerhub/github)
      # # ################################ 
      # - name: Log into registry (dockerhub)
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USER }}
      #     password: ${{ secrets.DOCKERHUB_PASS }}
      #     logout: true


      # - name: Build and push docker image (dockerhub)
      #   run: | 
      #     docker buildx build \
      #     --platform linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 \
      #     -t "donkeyx/tcp-wait:${{ steps.vars.outputs.docker_tag }}" \
      #     --push \
      #     .


      # - name: Log into registry (github)
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     logout: true


      # - name: Build and push docker image (github)
      #   run: | 
      #     docker buildx build \
      #     --platform linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 \
      #     -t "ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}" \
      #     --push \
      #     .


      # ################################
      # create release and push assets 
      # ################################ 
      - name: Build go binaries
        run: |
          make build-all


      - name: Release with Notes
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/app-release-unsigned.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # - name: Create Draft Release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.vars.outputs.git_ref }}
      #     release_name: ${{ steps.vars.outputs.git_ref }}
      #     draft: true
      #     prerelease: false

      # - uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./bin
      #     asset_content_type: application/octet-stream

