name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ $default-branch, 'release/*' ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ $default-branch ]

env:
  # # Use docker.io for Docker Hub if empty
  # REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    environment: deployment # this gets the secrets for deployments

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # for multi architecture builds arm/x86
      - name: Setup qumu runner
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1



      - name: Capture build vars
        id: vars
        shell: bash
        run: |
          git_ref=$(echo ${GITHUB_REF#refs/heads/}| tr "/" "-" )
          hash=${GITHUB_SHA::6}

          if [ "$GITHUB_REF_TYPE" == "tag" ]; then
            echo "processing tag"
            docker_tag="$git_ref"
          fi

          if [ "$GITHUB_REF_TYPE" == "branch" ]; then
            echo "processing branch"

            if [ "$git_ref" == "master" ]; then
              echo "match latest"
              docker_tag=latest
            fi
            
            docker_tag="${git_ref}"
          fi

          echo "branch: $git_ref"
          echo "hash: $hash"
          echo "dockertag: $docker_tag"

          echo "::set-output name=git_ref::$git_ref"
          echo "::set-output name=sha_short::$hash"
          echo "::set-output name=docker_tag::$docker_tag"
          




      # # Extract metadata (tags, labels) for Docker
      # # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: get deets
      #   shell: bash
      #   run: |
      #     echo "registry : ${{ env.REGISTRY }}" \
      #     echo "tags: ${{ steps.meta.outputs.tags }}" \
      #     echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}"



      - name: Log into registry (dockerhub)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          # registry: registry.hub.docker.com/donkeyx
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}





      # # --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x \

      # # --platform linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 \
      # - name: Login to Dockerhub Package Registry
      #   run: echo ${{ secrets.DOCKERHUB_PASS }} | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin

      #   # run: echo "${{ secrets.DOCKER_PASS }}" | docker login docker.pkg.github.com -u "${{ secrets.DOCKER_USER }}" --password-stdin


      - name: Build and push docker image (dockerhub)
        run: | 
          echo "${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}"

          # -t "${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}" \


          docker buildx build \
          --platform linux/amd64 \
          -t "donkeyx/tcp-wait:test-tagging-github" \
          --push \
          .


      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true


      - name: Build and push docker image github
        run: | 
          echo "registry.hub.docker.com/donkeyx/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}"

          docker buildx build \
          --platform linux/amd64 \
          -t "ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}" \
          --push \
          .


      # - name: Build and push Docker image
      #   id: build-and-push
      #   uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      #   with:
      #     context: .
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      # # Sign the resulting Docker image digest except on PRs.
      # # This will only write to the public Rekor transparency log when the Docker
      # # repository is public to avoid leaking data.  If you would like to publish
      # # transparency data even for private images, pass --force to cosign below.
      # # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   env:
      #     COSIGN_EXPERIMENTAL: "true"
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: cosign sign ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}



      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v3
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: |
      #       Changes in this Release
      #       - First Change
      #       - Second Change
      #     draft: false
      #     prerelease: false